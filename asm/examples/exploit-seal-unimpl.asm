_start:
	; we initialize an allocator with the root capability as the
        ; region (aka the root `ator`). this is possible because
        ; sealing/unsealing of capabilities is not implemented, so the
        ; root allocator capability is identical to the root
        ; capability.
	loadi a2, SYS_ALLOC_INIT
	loadi a3, 1 ; bump
	loadi a4, 255 ; all
	cpy a5, z0
	syscall

	; we're not able to jal here because AllocInit revokes
        ; capabilities overlapping the region to guarentee exclusive
        ; control. so Pc becomes data.
	jal zero, exit

	; there are obviously more deranged things that could be done
        ; here, such as manipulating an allocator's internal
        ; structure, writing into allocations you're not supposed to,
        ; literally just allocating, etc. this is simply a very loud
        ; "look, i denied service!"

exit:
	loadi a2, SYS_EXIT
	syscall
